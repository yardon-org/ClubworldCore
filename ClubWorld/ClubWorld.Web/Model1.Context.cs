//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClubWorld
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ClubWorldEntities : DbContext
    {
        public ClubWorldEntities()
            : base("name=ClubWorldEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<League_Result> League_Result { get; set; }
        public virtual DbSet<League_Teams> League_Teams { get; set; }
        public virtual DbSet<League_List> League_List { get; set; }
        public virtual DbSet<League_RegisteredPlayers> League_RegisteredPlayers { get; set; }
    
        public virtual int League_List_DEL(Nullable<int> leagueID)
        {
            var leagueIDParameter = leagueID.HasValue ?
                new ObjectParameter("LeagueID", leagueID) :
                new ObjectParameter("LeagueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("League_List_DEL", leagueIDParameter);
        }
    
        public virtual int League_List_INS(string description, Nullable<int> winPoints, Nullable<int> rinkPoints, Nullable<int> totalRinksRequired)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var winPointsParameter = winPoints.HasValue ?
                new ObjectParameter("WinPoints", winPoints) :
                new ObjectParameter("WinPoints", typeof(int));
    
            var rinkPointsParameter = rinkPoints.HasValue ?
                new ObjectParameter("RinkPoints", rinkPoints) :
                new ObjectParameter("RinkPoints", typeof(int));
    
            var totalRinksRequiredParameter = totalRinksRequired.HasValue ?
                new ObjectParameter("TotalRinksRequired", totalRinksRequired) :
                new ObjectParameter("TotalRinksRequired", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("League_List_INS", descriptionParameter, winPointsParameter, rinkPointsParameter, totalRinksRequiredParameter);
        }
    
        public virtual int League_List_UPD(Nullable<int> leagueID, string description, Nullable<int> winPoints, Nullable<int> rinkPoints, Nullable<int> totalRinksRequired)
        {
            var leagueIDParameter = leagueID.HasValue ?
                new ObjectParameter("LeagueID", leagueID) :
                new ObjectParameter("LeagueID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var winPointsParameter = winPoints.HasValue ?
                new ObjectParameter("WinPoints", winPoints) :
                new ObjectParameter("WinPoints", typeof(int));
    
            var rinkPointsParameter = rinkPoints.HasValue ?
                new ObjectParameter("RinkPoints", rinkPoints) :
                new ObjectParameter("RinkPoints", typeof(int));
    
            var totalRinksRequiredParameter = totalRinksRequired.HasValue ?
                new ObjectParameter("TotalRinksRequired", totalRinksRequired) :
                new ObjectParameter("TotalRinksRequired", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("League_List_UPD", leagueIDParameter, descriptionParameter, winPointsParameter, rinkPointsParameter, totalRinksRequiredParameter);
        }
    
        public virtual int LeagueTeams_DEL(Nullable<int> teamID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeagueTeams_DEL", teamIDParameter);
        }
    
        public virtual int LeagueTeams_INS(string teamName, Nullable<int> leagueRef)
        {
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            var leagueRefParameter = leagueRef.HasValue ?
                new ObjectParameter("LeagueRef", leagueRef) :
                new ObjectParameter("LeagueRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeagueTeams_INS", teamNameParameter, leagueRefParameter);
        }
    
        public virtual int LeagueTeams_UPD(Nullable<int> teamID, string teamName, Nullable<int> leagueRef)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            var leagueRefParameter = leagueRef.HasValue ?
                new ObjectParameter("LeagueRef", leagueRef) :
                new ObjectParameter("LeagueRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeagueTeams_UPD", teamIDParameter, teamNameParameter, leagueRefParameter);
        }
    }
}
